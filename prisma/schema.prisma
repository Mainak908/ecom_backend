generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())

  carts     Cart[]
  orders    Order[]
  reviews   Review[]
  addresses Address[]
}

enum Role {
  CUSTOMER
  ADMIN
}

model Product {
  id          String         @id @default(uuid())
  name        String
  slug        String         @unique
  description String
  price       Decimal        @db.Decimal(10, 2)
  stock       Int
  category    Category       @relation(fields: [categoryId], references: [id])
  categoryId  String
  images      ProductImage[]
  reviews     Review[]
  createdAt   DateTime       @default(now())

  cartItem  CartItem[]
  orderItem OrderItem[]
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id     String @id @default(uuid())
  cart   Cart   @relation(fields: [cartId], references: [id])
  cartId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}

model Order {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  items       OrderItem[]
  totalAmount Decimal     @db.Decimal(10, 2)
  status      OrderStatus @default(PENDING)

  shippingAddr      Address  @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddr       Address  @relation("BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddressId String   @unique
  billingAddressId  String   @unique
  payment           Payment?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
}

model Address {
  id         String  @id @default(uuid())
  user       User    @relation(fields: [userId], references: [id])
  userId     String
  fullName   String
  phone      String
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String

  shippingOrder Order? @relation("ShippingAddress")
  billingOrder  Order? @relation("BillingAddress")
}

model Payment {
  id       String        @id @default(uuid())
  order    Order         @relation(fields: [orderId], references: [id])
  orderId  String        @unique
  provider String
  status   PaymentStatus
  amount   Decimal       @db.Decimal(10, 2)
  paidAt   DateTime?
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Review {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Int // 1 to 5
  comment   String?
  createdAt DateTime @default(now())
}
